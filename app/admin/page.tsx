'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Plus, Save, Trash2, BookOpen } from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Navbar } from '@/components/layout/navbar'

interface Subject {
  id: string
  name: string
  icon: string
  color: string
  questionCount: number
}

interface Question {
  id?: string
  questionText: string
  options: string[]
  correctOption: number
  explanation: string
  topic: string
  difficulty: 'easy' | 'medium' | 'hard'
}

export default function AdminPage() {
  const [subjects, setSubjects] = useState<Subject[]>([])
  const [selectedSubject, setSelectedSubject] = useState<string>('')
  const [questions, setQuestions] = useState<Question[]>([])
  const [newQuestion, setNewQuestion] = useState<Question>({
    questionText: '',
    options: ['', '', '', ''],
    correctOption: 0,
    explanation: '', // –ë—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ò–ò
    topic: '',
    difficulty: 'medium'
  })
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    fetchSubjects()
  }, [])

  const fetchSubjects = async () => {
    try {
      const response = await fetch('/api/subjects')
      const data = await response.json()
      setSubjects(data)
    } catch (error) {
      console.error('Error fetching subjects:', error)
    }
  }

  const fetchQuestions = async (subjectId: string) => {
    try {
      const response = await fetch(`/api/questions/${subjectId}`)
      const data = await response.json()
      setQuestions(data)
    } catch (error) {
      console.error('Error fetching questions:', error)
      setQuestions([])
    }
  }

  const handleSubjectChange = (subjectId: string) => {
    setSelectedSubject(subjectId)
    if (subjectId) {
      fetchQuestions(subjectId)
    } else {
      setQuestions([])
    }
  }

  const handleOptionChange = (index: number, value: string) => {
    const newOptions = [...newQuestion.options]
    newOptions[index] = value
    setNewQuestion({ ...newQuestion, options: newOptions })
  }

  const addQuestion = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!selectedSubject) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç')
      return
    }
    
    if (!newQuestion.questionText.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞')
      return
    }
    
    if (newQuestion.options.some(option => !option.trim())) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤')
      return
    }
    
    if (!newQuestion.topic.trim()) {
      alert('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞')
      return
    }

    setIsLoading(true)
    try {
      const response = await fetch('/api/admin/questions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...newQuestion,
          subjectId: selectedSubject
        })
      })

      if (response.ok) {
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        setNewQuestion({
          questionText: '',
          options: ['', '', '', ''],
          correctOption: 0,
          explanation: '', // –ë—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ò–ò
          topic: '',
          difficulty: 'medium'
        })
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        fetchQuestions(selectedSubject)
        fetchSubjects() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        alert('–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞')
      }
    } catch (error) {
      console.error('Error adding question:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞')
    } finally {
      setIsLoading(false)
    }
  }

  const deleteQuestion = async (questionId: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?')) return

    try {
      const response = await fetch(`/api/admin/questions/${questionId}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        fetchQuestions(selectedSubject)
        fetchSubjects()
        alert('–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω')
      }
    } catch (error) {
      console.error('Error deleting question:', error)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üõ†Ô∏è
          </h1>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ï–ù–¢
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>–ü—Ä–µ–¥–º–µ—Ç—ã</CardTitle>
                <CardDescription>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏</CardDescription>
              </CardHeader>
              <CardContent className="space-y-2">
                {subjects.map((subject) => (
                  <button
                    key={subject.id}
                    onClick={() => handleSubjectChange(subject.id)}
                    className={`w-full text-left p-3 rounded-lg border transition-colors ${
                      selectedSubject === subject.id
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <span className="text-xl">{subject.icon}</span>
                        <span className="font-medium">{subject.name}</span>
                      </div>
                      <Badge variant="outline">{subject.questionCount}</Badge>
                    </div>
                  </button>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ */}
          <div className="lg:col-span-2">
            {selectedSubject ? (
              <Card>
                <CardHeader>
                  <CardTitle>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</CardTitle>
                  <CardDescription>
                    –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞</label>
                    <Input
                      value={newQuestion.questionText}
                      onChange={(e) => setNewQuestion({ ...newQuestion, questionText: e.target.value })}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞..."
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</label>
                    <div className="space-y-2">
                      {newQuestion.options.map((option, index) => (
                        <div key={index} className="flex items-center space-x-2">
                          <span className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center text-sm font-medium">
                            {String.fromCharCode(65 + index)}
                          </span>
                          <Input
                            value={option}
                            onChange={(e) => handleOptionChange(index, e.target.value)}
                            placeholder={`–í–∞—Ä–∏–∞–Ω—Ç ${String.fromCharCode(65 + index)}`}
                          />
                          <input
                            type="radio"
                            name="correctOption"
                            checked={newQuestion.correctOption === index}
                            onChange={() => setNewQuestion({ ...newQuestion, correctOption: index })}
                            className="w-4 h-4"
                          />
                        </div>
                      ))}
                    </div>
                    <p className="text-xs text-gray-500 mt-1">–û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</p>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">–¢–µ–º–∞</label>
                      <Input
                        value={newQuestion.topic}
                        onChange={(e) => setNewQuestion({ ...newQuestion, topic: e.target.value })}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–≥–µ–±—Ä–∞"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2">–°–ª–æ–∂–Ω–æ—Å—Ç—å</label>
                      <select
                        value={newQuestion.difficulty}
                        onChange={(e) => setNewQuestion({ ...newQuestion, difficulty: e.target.value as any })}
                        className="w-full p-2 border border-gray-300 rounded-md"
                      >
                        <option value="easy">–õ–µ–≥–∫–∏–π</option>
                        <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                        <option value="hard">–°–ª–æ–∂–Ω—ã–π</option>
                      </select>
                    </div>
                  </div>

                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="text-blue-600">ü§ñ</span>
                      <span className="text-sm font-medium text-blue-800">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç –ò–ò</span>
                    </div>
                    <p className="text-sm text-blue-700">
                      –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞, —Ç–µ–º—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
                    </p>
                  </div>

                  <Button
                    onClick={addQuestion}
                    disabled={
                      isLoading || 
                      !newQuestion.questionText.trim() || 
                      !newQuestion.topic.trim() ||
                      newQuestion.options.some(option => !option.trim())
                    }
                    className="w-full"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {isLoading ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º...' : '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å (—Å –ò–ò –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º)'}
                  </Button>
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardContent className="flex items-center justify-center h-64">
                  <div className="text-center">
                    <BookOpen className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤</p>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ */}
        {selectedSubject && questions.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-8"
          >
            <Card>
              <CardHeader>
                <CardTitle>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã ({questions.length})</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {questions.map((question, index) => (
                    <div key={question.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="font-medium">
                          {index + 1}. {question.questionText}
                        </h4>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => deleteQuestion(question.id!)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                      <div className="grid grid-cols-2 gap-2 text-sm text-gray-600 mb-2">
                        {question.options.map((option, optIndex) => (
                          <div
                            key={optIndex}
                            className={`p-2 rounded ${
                              optIndex === question.correctOption
                                ? 'bg-green-100 text-green-800'
                                : 'bg-gray-100'
                            }`}
                          >
                            {String.fromCharCode(65 + optIndex)}. {option}
                          </div>
                        ))}
                      </div>
                      <div className="flex items-center space-x-4 text-xs text-gray-500">
                        <span>–¢–µ–º–∞: {question.topic}</span>
                        <span>–°–ª–æ–∂–Ω–æ—Å—Ç—å: {question.difficulty}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </main>
    </div>
  )
}