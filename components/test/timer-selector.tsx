'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { Clock, CheckCircle } from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'

interface TimerOption {
  minutes: number
  seconds: number
  label: string
  description: string
  recommended?: boolean
}

interface TimerSelectorProps {
  onSelect: (timeInSeconds: number) => void
  onCancel: () => void
}

const timerOptions: TimerOption[] = [
  {
    minutes: 60,
    seconds: 3600,
    label: '60 –º–∏–Ω—É—Ç',
    description: '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
  },
  {
    minutes: 120,
    seconds: 7200,
    label: '120 –º–∏–Ω—É—Ç',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
    recommended: true,
  },
  {
    minutes: 180,
    seconds: 10800,
    label: '180 –º–∏–Ω—É—Ç',
    description: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è',
  },
  {
    minutes: 240,
    seconds: 14400,
    label: '240 –º–∏–Ω—É—Ç',
    description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è',
  },
]

export function TimerSelector({ onSelect, onCancel }: TimerSelectorProps) {
  const [selectedTimer, setSelectedTimer] = useState<number>(7200) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 120 –º–∏–Ω—É—Ç

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4"
      >
        <Card>
          <CardHeader className="text-center">
            <div className="w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Clock className="w-8 h-8 text-primary-600" />
            </div>
            <CardTitle className="text-2xl">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∞</CardTitle>
            <CardDescription>
              –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {timerOptions.map((option) => (
                <motion.div
                  key={option.seconds}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <button
                    onClick={() => setSelectedTimer(option.seconds)}
                    className={`w-full p-4 rounded-lg border-2 transition-all text-left relative ${
                      selectedTimer === option.seconds
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    {option.recommended && (
                      <div className="absolute -top-2 -right-2">
                        <div className="bg-warning-500 text-white text-xs px-2 py-1 rounded-full">
                          –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
                        </div>
                      </div>
                    )}
                    
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold text-lg">{option.label}</h3>
                      {selectedTimer === option.seconds && (
                        <CheckCircle className="w-5 h-5 text-primary-600" />
                      )}
                    </div>
                    
                    <p className="text-sm text-gray-600">{option.description}</p>
                    
                    <div className="mt-3 flex items-center space-x-2 text-xs text-gray-500">
                      <Clock className="w-4 h-4" />
                      <span>{option.minutes} –º–∏–Ω—É—Ç = {Math.round(option.minutes / 60 * 100) / 100} —á–∞—Å–∞</span>
                    </div>
                  </button>
                </motion.div>
              ))}
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mt-6">
              <div className="flex items-start space-x-3">
                <div className="text-blue-600 mt-0.5">üí°</div>
                <div>
                  <h4 className="font-medium text-blue-900 mb-1">–°–æ–≤–µ—Ç –ø–æ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏:</h4>
                  <ul className="text-sm text-blue-800 space-y-1">
                    <li>‚Ä¢ <strong>60 –º–∏–Ω—É—Ç</strong> - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</li>
                    <li>‚Ä¢ <strong>120 –º–∏–Ω—É—Ç</strong> - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤</li>
                    <li>‚Ä¢ <strong>180-240 –º–∏–Ω—É—Ç</strong> - –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º</li>
                  </ul>
                </div>
              </div>
            </div>

            <div className="flex justify-between pt-4">
              <Button variant="outline" onClick={onCancel}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button onClick={() => onSelect(selectedTimer)}>
                –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç ({timerOptions.find(t => t.seconds === selectedTimer)?.label})
              </Button>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  )
}