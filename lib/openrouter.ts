import axios from 'axios'

const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions'

export interface OpenRouterMessage {
  role: 'system' | 'user' | 'assistant'
  content: string
}

export class OpenRouterService {
  private apiKey: string

  constructor() {
    this.apiKey = process.env.OPENROUTER_API_KEY!
  }

  async generateExplanation(
    topic: string,
    question: string,
    correctAnswer: string,
    userAnswer: string,
    subject: string
  ): Promise<string> {
    const messages: OpenRouterMessage[] = [
      {
        role: 'system',
        content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ù–¢ —Å 15-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
1. üîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ - –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
2. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø–æ—à–∞–≥–æ–≤–æ –ø–æ–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥ –º—ã—Å–ª–µ–π
3. üìö –ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö - —É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
4. üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã - –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
5. üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è - –ø–æ–¥–±–æ–¥—Ä–∏ –∏ –Ω–∞–ø—Ä–∞–≤—å –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –∏–∑—É—á–µ–Ω–∏–µ

–ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –∞–Ω–∞–ª–æ–≥–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.`
      },
      {
        role: 'user',
        content: `–ü—Ä–µ–¥–º–µ—Ç: ${subject}
–¢–µ–º–∞: ${topic}
–í–æ–ø—Ä–æ—Å: ${question}
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}
–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: ${userAnswer}

–î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—ã—à–µ. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Ç–µ–º.`
      }
    ]

    try {
      const response = await axios.post(
        OPENROUTER_API_URL,
        {
          model: 'anthropic/claude-3-haiku',
          messages,
          max_tokens: 800,
          temperature: 0.7,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': process.env.NEXTAUTH_URL,
            'X-Title': 'ENT Prep App',
          }
        }
      )

      return response.data.choices[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.'
    } catch (error) {
      console.error('OpenRouter API Error:', error)
      return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    }
  }

  async generatePositiveExplanation(
    topic: string,
    question: string,
    correctAnswer: string,
    subject: string
  ): Promise<string> {
    const messages: OpenRouterMessage[] = [
      {
        role: 'system',
        content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ù–¢. –°—Ç—É–¥–µ–Ω—Ç –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ—Ö–≤–∞–ª–∏—Ç—å –µ–≥–æ –∏ –¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ.

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
1. üéâ –ü–æ—Ö–≤–∞–ª–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
2. üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–µ—à–µ–Ω–∏—è
3. üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ
4. üîó –°–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ–º–∞–º–∏
5. üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –∏–∑—É—á–µ–Ω–∏—é

–ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º!`
      },
      {
        role: 'user',
        content: `–ü—Ä–µ–¥–º–µ—Ç: ${subject}
–¢–µ–º–∞: ${topic}
–í–æ–ø—Ä–æ—Å: ${question}
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}

–°—Ç—É–¥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –î–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.`
      }
    ]

    try {
      const response = await axios.post(
        OPENROUTER_API_URL,
        {
          model: 'anthropic/claude-3-haiku',
          messages,
          max_tokens: 600,
          temperature: 0.7,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': process.env.NEXTAUTH_URL,
            'X-Title': 'ENT Prep App',
          }
        }
      )

      return response.data.choices[0]?.message?.content || '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!'
    } catch (error) {
      console.error('OpenRouter API Error:', error)
      return 'üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
    }
  }

  async generatePositiveExplanation(
    topic: string,
    question: string,
    correctAnswer: string,
    subject: string
  ): Promise<string> {
    const messages: OpenRouterMessage[] = [
      {
        role: 'system',
        content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "${subject}". –°—Ç—É–¥–µ–Ω—Ç –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ.`
      },
      {
        role: 'user',
        content: `–¢–µ–º–∞: ${topic}
–í–æ–ø—Ä–æ—Å: ${question}
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}

–°—Ç—É–¥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ.`
      }
    ]

    try {
      const response = await axios.post(
        OPENROUTER_API_URL,
        {
          model: 'anthropic/claude-3-haiku',
          messages,
          max_tokens: 300,
          temperature: 0.7,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': process.env.NEXTAUTH_URL,
            'X-Title': 'ENT Prep App',
          }
        }
      )

      return response.data.choices[0]?.message?.content || '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!'
    } catch (error) {
      console.error('OpenRouter API Error:', error)
      return '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!'
    }
  }

  async generateQuestionExplanation(
    topic: string,
    questionText: string,
    correctAnswer: string,
    subject: string,
    allOptions: string[]
  ): Promise<string> {
    const messages: OpenRouterMessage[] = [
      {
        role: 'system',
        content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "${subject}". –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ï–ù–¢. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø–æ–º–æ—á—å —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ–Ω—è—Ç—å —Ç–µ–º—É.`
      },
      {
        role: 'user',
        content: `–ü—Ä–µ–¥–º–µ—Ç: ${subject}
–¢–µ–º–∞: ${topic}
–í–æ–ø—Ä–æ—Å: ${questionText}
–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: ${allOptions.map((opt, i) => `${String.fromCharCode(65 + i)}) ${opt}`).join(', ')}
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ø–æ—á–µ–º—É —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞, –≥–æ—Ç–æ–≤—è—â–µ–≥–æ—Å—è –∫ –ï–ù–¢.`
      }
    ]

    try {
      const response = await axios.post(
        OPENROUTER_API_URL,
        {
          model: 'anthropic/claude-3-haiku',
          messages,
          max_tokens: 200,
          temperature: 0.7,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': process.env.NEXTAUTH_URL,
            'X-Title': 'ENT Prep App',
          }
        }
      )

      return response.data.choices[0]?.message?.content || `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`
    } catch (error) {
      console.error('OpenRouter API Error:', error)
      return `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}. –ò–∑—É—á–∏—Ç–µ —Ç–µ–º—É "${topic}" –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.`
    }
  }

  async askTutor(subject: string, question: string): Promise<string> {
    const messages: OpenRouterMessage[] = [
      {
        role: 'system',
        content: `–¢—ã –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "${subject}" –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ù–¢. –û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, —Ñ–æ—Ä–º—É–ª–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.`
      },
      {
        role: 'user',
        content: question
      }
    ]

    try {
      const response = await axios.post(
        OPENROUTER_API_URL,
        {
          model: 'anthropic/claude-3-haiku',
          messages,
          max_tokens: 800,
          temperature: 0.7,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': process.env.NEXTAUTH_URL,
            'X-Title': 'ENT Prep App',
          }
        }
      )

      return response.data.choices[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.'
    } catch (error) {
      console.error('OpenRouter API Error:', error)
      return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    }
  }
}

export const openRouterService = new OpenRouterService()