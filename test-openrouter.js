// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenRouter API
const axios = require('axios');

const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';
const API_KEY = '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';

async function testOpenRouter() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter API...');
    
    const response = await axios.post(
      OPENROUTER_API_URL,
      {
        model: 'anthropic/claude-3-haiku',
        messages: [
          {
            role: 'system',
            content: '–¢—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.'
          },
          {
            role: 'user',
            content: '–û–±—ä—è—Å–Ω–∏, —á–µ–º—É —Ä–∞–≤–µ–Ω –∫–æ—Ä–µ–Ω—å –∏–∑ 144?'
          }
        ],
        max_tokens: 200,
        temperature: 0.7,
      },
      {
        headers: {
          'Authorization': `Bearer ${API_KEY}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'http://localhost:3000',
          'X-Title': 'ENT Prep App',
        }
      }
    );

    console.log('‚úÖ OpenRouter API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('–û—Ç–≤–µ—Ç:', response.data.choices[0]?.message?.content);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ OpenRouter API:', error.response?.data || error.message);
  }
}

testOpenRouter();